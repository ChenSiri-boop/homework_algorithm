作业1：
问题9：
①  伪代码：
function QuickSort(A, p, r)
    if p < r
        // 使用 BB 选择数组中位数附近的元素作为基准
        mid = (p + r) // 2
        pivotIndex = BB(A, p, r, mid)
        
        // Partition: 将数组根据基准元素分成两部分
        q = Partition(A, p, r, pivotIndex)
        
        // 递归地对左半部分和右半部分排序
        QuickSort(A, p, q - 1)
        QuickSort(A, q + 1, r)
    end if
end function

// Partition 算法，返回基准元素的位置
function Partition(A, p, r, pivotIndex)
    pivotValue = A[pivotIndex]
    swap(A[pivotIndex], A[r])  // 将基准元素放到数组的末尾
    i = p - 1
    for j = p to r - 1
        if A[j] <= pivotValue
            i = i + 1
            swap(A[i], A[j])
        end if
    end for
    swap(A[i + 1], A[r])  // 将基准元素放到正确的位置
    return i + 1
end function

// 选择算法 BB (基于 Median of Medians)
function BB(A, p, r, k)
    if r - p + 1 <= 5
        return InsertionSort(A, p, r)[k]
    
    // 分组：每5个元素一组
    for i = p to r by 5
        end = min(i + 4, r)
        groupMedian = InsertionSort(A, i, end)[(end - i) // 2]
        swap(A[p + (i - p) // 5], groupMedian)  // 将每组的中位数放到数组前面
    
    // 递归调用：通过选出中位数的中位数
    mid = (p + r) // 2
    return BB(A, p, p + (r - p) // 5, mid)  // 选择中位数的中位数
end function

// 插入排序，返回排序后的数组
function InsertionSort(A, p, r)
    for i = p + 1 to r
        key = A[i]
        j = i - 1
        while j >= p and A[j] > key
            A[j + 1] = A[j]
            j = j - 1
        end while
        A[j + 1] = key
    end for
    return A
end function
// 分析：
//1.传统 QuickSort 算法：
QuickSort 是一种分治算法，首先通过一个基准元素将数组分为两部分，然后递归地对这两部分进行排序。标准 QuickSort 在选择基准元素时，通常会选择第一个元素或随机选择一个元素。然而，当输入数组已经是有序的或接近有序时，选择基准的策略会导致 QuickSort 的最坏时间复杂度变成 O(n²)。
//2.Median of Medians 方法：
这个方法的目的是通过确保基准元素尽量是数组的中位数来优化 QuickSort。通过这种方法，我们可以避免每次都选择最坏的基准元素，从而确保最坏情况下的时间复杂度为 O(n log n)。
BB(A, p, r, k) 这个函数能够在 O(n) 时间内找到数组 A 中第 k 小的元素的下标。
//3.如何改进 QuickSort：
我们在每次递归时选择基准元素时，不再随机选择或选择数组的第一个元素，而是通过调用 BB(A, p, r, k) 选取数组中位数附近的元素作为基准。
通过这种方式，确保每次划分时，基准元素都能将数组尽量均匀地分为两部分，这样可以保证每次递归的规模减小的速度较快，从而避免最坏情况的发生。

问题2：
伪代码：
// 使用 BB 算法找到前 k 小的元素
function FindTopK(A, p, r, k)
    if k == 0
        return []
    
    // 调用 BB 查找第 k 小元素
    pivotIndex = BB(A, p, r, k)
    pivotValue = A[pivotIndex]
    
    // 将小于或等于 pivotValue 的元素筛选出来
    topK = []
    for i = p to r
        if A[i] <= pivotValue
            topK.append(A[i])
    
    // 只返回前 k 个最小元素
    return topK[:k]
end function

// 选择算法 BB
function BB(A, p, r, k)
    if r - p + 1 <= 5
        return InsertionSort(A, p, r)[k]
    
    // 分组：每5个元素一组
    for i = p to r by 5
        end = min(i + 4, r)
        groupMedian = InsertionSort(A, i, end)[(end - i) // 2]
        swap(A[p + (i - p) // 5], groupMedian)  // 将每组的中位数放到数组前面
    
    // 递归调用：通过选出中位数的中位数
    mid = (p + r) // 2
    return BB(A, p, p + (r - p) // 5, mid)  // 选择中位数的中位数
end function

// 插入排序，返回排序后的数组
function InsertionSort(A, p, r)
    for i = p + 1 to r
        key = A[i]
        j = i - 1
        while j >= p and A[j] > key
            A[j + 1] = A[j]
            j = j - 1
        end while
        A[j + 1] = key
    end for
    return A
end function


//问题3：
//伪代码：
// 使用最小堆将数组A排序并划分为k个部分
function SortAndDivide(A, k)
    n = length(A)
    
    // 1. 初始化k个堆部分
    heap = new MinHeap()
    
    // 将数组A分为k个部分，每个部分放入堆中
    for i = 1 to k
        heap.insert(A[i])
    
    // 2. 对堆进行排序
    sortedArray = []
    for i = 1 to n
        // 提取最小元素并将其添加到排序结果
        minElement = heap.extractMin()
        sortedArray.append(minElement)
        
        // 如果该部分还有元素，插入下一个元素
        if hasNextElement(A, i)
            nextElement = A[i+1]
            heap.insert(nextElement)
    
    return sortedArray
end function

// 辅助函数，检查部分是否还有元素
function hasNextElement(A, i)
    return i + 1 <= length(A)
end function
